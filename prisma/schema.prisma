// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  geminiApiKey  String?   // User's personal Gemini API key
  accounts      Account[]
  sessions      Session[]
  brands        Brand[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id            String        @id @default(cuid())
  name          String
  description   String?
  guidelines    String?
  voiceSamples  String?
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  voiceProfiles VoiceProfile[]
  copyGenerations CopyGeneration[]
  templates     Template[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VoiceProfile {
  id                String  @id @default(cuid())
  brandId           String
  brand             Brand   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  // Voice Matrix (-1 to 1)
  formalCasual      Float   @default(0) // -1 = very casual, 1 = very formal
  authoritativeApproachable Float @default(0) // -1 = very approachable, 1 = very authoritative
  
  // Tone Matrix (-1 to 1)
  professionalConversational Float @default(0) // -1 = very conversational, 1 = very professional
  seriousPlayful    Float   @default(0) // -1 = very playful, 1 = very serious
  
  // Additional voice characteristics
  confidence        Float   @default(0) // -1 to 1
  enthusiasm        Float   @default(0) // -1 to 1
  empathy           Float   @default(0) // -1 to 1
  
  // Metadata
  name              String?
  description       String?
  isDefault         Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  copyGenerations   CopyGeneration[]
  templates         Template[]
}

model CopyGeneration {
  id                String  @id @default(cuid())
  brandId           String
  brand             Brand   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  // Content details
  channel           String  // email, linkedin, instagram, web, etc.
  prompt            String
  generatedContent  String
  characterCount    Int
  
  // Voice consistency
  voiceConsistencyScore Float? // 0-100
  voiceProfileId    String?
  voiceProfile      VoiceProfile? @relation(fields: [voiceProfileId], references: [id])
  
  // Performance tracking
  performanceScore  Float? // 0-100
  engagementRate    Float?
  clickThroughRate  Float?
  
  // Metadata
  title             String?
  tags              String // Comma-separated tags
  isDraft           Boolean @default(true)
  isPublished       Boolean @default(false)
  publishedAt       DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Template {
  id                String  @id @default(cuid())
  brandId           String
  brand             Brand   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  // Template details
  name              String
  description       String?
  channel           String
  promptTemplate    String
  
  // Voice settings
  voiceProfileId    String?
  voiceProfile      VoiceProfile? @relation(fields: [voiceProfileId], references: [id])
  
  // Usage tracking
  usageCount        Int     @default(0)
  isActive          Boolean @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
